
struct ListNode {
    int val;
    ListNode* next;
    ListNode() : val(0), next(nullptr) {}
    ListNode(int x) : val(x), next(nullptr) {}
    ListNode(int x, ListNode* next) : val(x), next(next) {}
};

//移除链表元素
class Solution {
public:
    ListNode* removeElements(ListNode* head, int val) {
        ListNode* pre_head = new ListNode(0, head);
        ListNode* pre = pre_head, * cur = head;
        while (cur != NULL) {
            if (cur->val == val) {
                cur = cur->next;
                pre->next = cur;
            }
            else {
                pre = pre->next;
                cur = cur->next;
            }
        }
        return pre_head->next;
    }
};

//翻转链表
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        ListNode* pre = NULL, * cur = head, * temp = NULL;
        while (cur != NULL) {
            temp = cur->next;
            cur->next = pre;
            pre = cur;
            cur = temp;
        }
        return pre;
    }
};

//两两交换链表中的节点
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        ListNode* pre_head = new ListNode(0, head);
        ListNode* cur = pre_head;
        while (cur->next != NULL && cur->next->next != NULL) {
            ListNode* temp_f = cur->next;
            ListNode* temp_s = cur->next->next->next;

            cur->next = cur->next->next;
            cur->next->next = temp_f;
            cur->next->next->next = temp_s;

            cur = cur->next->next;
        }
        return pre_head->next;
    }
};

//删除链表的倒数第N个节点
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode* pre_head = new ListNode(0, head);
        ListNode* fast = pre_head, * slow = pre_head;
        for (int i = 1; i <= n; i++) {
            slow = slow->next;
        }
        while (slow->next != NULL) {
            fast = fast->next;
            slow = slow->next;
        }
        fast->next = fast->next->next;
        return pre_head->next;
    }
};
